{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\EmailAuthenticator\\\\client\\\\src\\\\components\\\\auth\\\\MailActivation.js\";\nimport React, { Fragment } from 'react';\nimport { activateMail, register } from '../../actions/auth';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MailActivation = ({\n  isAuthenticated,\n  register,\n  activateMail\n}) => {\n  // const token=window.location.pathname;\n  let urlElements = window.location.href.split('/');\n  let token = '';\n  token = urlElements[5];\n  const body1 = JSON.stringify({\n    token\n  });\n\n  const parseJwt = token => {\n    try {\n      if (!token) {\n        throw new Error('parseJwt# Token is required.');\n      }\n\n      const base64Payload = token.split('.')[1];\n      let payload = new Uint8Array();\n\n      try {\n        payload = Buffer.from(base64Payload, 'base64');\n      } catch (err) {\n        throw new Error(`parseJwt# Malformed token: ${err}`);\n      }\n\n      return {\n        decodedToken: JSON.parse(payload)\n      };\n    } catch (err) {\n      console.log(`Bonus logging: ${err}`);\n      return {\n        error: 'Unable to decode token.'\n      };\n    }\n  };\n\n  const {\n    error,\n    decodedToken\n  } = parseJwt(token);\n\n  if (!decodedToken.exp) {\n    console.log('almost_happy_path: token has illegal claims (missing expires_at timestamp)', decodedToken); // note: exp, iat, iss, jti, nbf, prv, sub\n  }\n\n  const {\n    name,\n    email,\n    password\n  } = decodedToken;\n  window.localStorage.setItem('token', token);\n\n  const onSubmit = async e => {\n    e.preventDefault();\n    activateMail(token);\n    register({\n      name,\n      email,\n      password\n    });\n    console.log(urlElements);\n    console.log(token);\n    console.log(body1); // console.log(decodedData);\n  }; // if (isAuthenticated) {\n  //   return <Redirect to='/login' />;\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-primary\",\n      children: \"You are almost done. To Activate Your Account on Me2Me Please Click on the Activate Account !\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: e => onSubmit(e),\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        value: \"Activate Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_c = MailActivation;\nMailActivation.propTypes = {\n  activateMail: PropTypes.func.isRequired,\n  register: PropTypes.func.isRequired\n};\nexport default connect(null, {\n  register,\n  activateMail\n})(MailActivation);\n\nvar _c;\n\n$RefreshReg$(_c, \"MailActivation\");","map":{"version":3,"sources":["C:/Projects/EmailAuthenticator/client/src/components/auth/MailActivation.js"],"names":["React","Fragment","activateMail","register","Redirect","connect","PropTypes","MailActivation","isAuthenticated","urlElements","window","location","href","split","token","body1","JSON","stringify","parseJwt","Error","base64Payload","payload","Uint8Array","Buffer","from","err","decodedToken","parse","console","log","error","exp","name","email","password","localStorage","setItem","onSubmit","e","preventDefault","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\r\nimport {  activateMail,register } from '../../actions/auth';\r\nimport {  Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nconst MailActivation = ({isAuthenticated,register,activateMail}) => {\r\n  // const token=window.location.pathname;\r\n  let urlElements = window.location.href.split('/');\r\n  let token='';\r\n  token=urlElements[5];\r\n  const body1 = JSON.stringify({token});\r\n  const parseJwt = (token) => {\r\n    try {\r\n        if (!token) {\r\n            throw new Error('parseJwt# Token is required.');\r\n        }\r\n\r\n        const base64Payload = token.split('.')[1];\r\n        let payload = new Uint8Array();\r\n\r\n        try {\r\n            payload = Buffer.from(base64Payload, 'base64');\r\n        } catch (err) {\r\n            throw new Error(`parseJwt# Malformed token: ${err}`);\r\n        }\r\n\r\n        return {\r\n            decodedToken: JSON.parse(payload),\r\n        };\r\n    } catch (err) {\r\n        console.log(`Bonus logging: ${err}`);\r\n\r\n        return {\r\n            error: 'Unable to decode token.',\r\n        };\r\n    }\r\n};\r\nconst { error, decodedToken } = parseJwt(token);\r\nif (!decodedToken.exp) {\r\n    console.log('almost_happy_path: token has illegal claims (missing expires_at timestamp)', decodedToken);\r\n    // note: exp, iat, iss, jti, nbf, prv, sub\r\n}\r\nconst {name,email,password}=decodedToken;\r\n  window.localStorage.setItem('token', token);\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    activateMail(token);\r\n    register({name,email,password});\r\n    console.log(urlElements);\r\n    console.log(token);\r\n    console.log(body1);\r\n    // console.log(decodedData);\r\n  };\r\n  // if (isAuthenticated) {\r\n  //   return <Redirect to='/login' />;\r\n  // }\r\n  return (\r\n    <Fragment>\r\n      <h2 className='text-primary'>\r\n        You are almost done.\r\n        To Activate Your Account on Me2Me Please Click on the Activate Account !\r\n      </h2>\r\n      <form\r\n        className='form'\r\n        onSubmit={(e) => onSubmit(e)}\r\n      >\r\n        <input\r\n          type='submit'\r\n          className='btn btn-primary'\r\n          value='Activate Account'\r\n        />\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\nMailActivation.propTypes = {\r\n  activateMail: PropTypes.func.isRequired,\r\n  register: PropTypes.func.isRequired,\r\n};\r\nexport default connect(null, { register,activateMail })(MailActivation);\r\n\r\n"]},"metadata":{},"sourceType":"module"}