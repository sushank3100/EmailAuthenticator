{"ast":null,"code":"import axios from 'axios';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, FORGOT_PASSWORD, FORGOT_PASSWORD_FAIL, ACTIVATION_SUCCESS, ACTIVATION_FAIL } from './types';\nimport { setAlert } from './alert';\nimport setAuthToken from '../../src/utills/setAuthToken'; // Load User\n\nexport const loadUser = ({\n  token\n}) => async dispatch => {\n  localStorage.setItem('token', payload.token);\n\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Load User1\n\nexport const loadUser1 = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    }); // dispatch(loadUser());\n  } catch (error) {\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (error) {\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Reset Password\n\nexport const forgotPassword = ({\n  email\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email\n  });\n\n  try {\n    const res = await axios.put('/api/forgot-password', body, config);\n    dispatch({\n      type: FORGOT_PASSWORD,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (error) {\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: FORGOT_PASSWORD_FAIL\n    });\n  }\n}; // // Activate Mail By Id\n// export const activateMail = (token) => async (dispatch) => {\n//   const config = {\n//     headers: {\n//       'Content-Type': 'application/json',\n//     },\n//   };\n//   const body = JSON.stringify({token});\n//   try {\n//     const res=await axios({\n//       method: 'POST',\n//       url:`/api/activation/${token}`,\n//       data:{token:res.token}\n//     }).then(res=>{\n//       console.log(res);\n//     });\n//     dispatch({\n//       type: REGISTER_SUCCESS,\n//       payload: res.data,\n//     });\n//     // dispatch(login());\n//     dispatch(loadUser());\n//   } catch (error) {\n//     dispatch({\n//       type: REGISTER_FAIL,\n//       payload: {\n//         message: error.response.statusText,\n//         status: error.response.status,\n//       },\n//     });\n//   }\n// };\n// Activate User\n\nexport const activateMail = ({\n  token\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // const decoded = jwt.verify(token, config.get('jwtSecret'));\n  // req.user = decoded.user;\n  // let base64Url = token.split('.')[1]; // token you get\n  // let base64 = base64Url.replace('-', '+').replace('_', '/');\n  // let decodedData = JSON.parse(Buffer.from(base64, 'base64').toString('binary'));\n  // let {name,email, password}=decodedData\n  // console.log(name+email+password)\n  // window.localStorage.setItem('token', token);\n\n  const body = JSON.stringify({\n    token\n  });\n\n  try {\n    const res = await axios.post(`/api/email-activate`, body, config);\n    dispatch({\n      type: ACTIVATION_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser1(token));\n  } catch (error) {\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: ACTIVATION_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["C:/Projects/EmailAuthenticator/client/src/actions/auth.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","FORGOT_PASSWORD","FORGOT_PASSWORD_FAIL","ACTIVATION_SUCCESS","ACTIVATION_FAIL","setAlert","setAuthToken","loadUser","token","dispatch","localStorage","setItem","payload","res","get","type","data","error","loadUser1","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","msg","login","forgotPassword","put","activateMail"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  FORGOT_PASSWORD,\r\n  FORGOT_PASSWORD_FAIL,\r\n  ACTIVATION_SUCCESS,\r\n  ACTIVATION_FAIL,\r\n} from './types';\r\nimport { setAlert } from './alert';\r\nimport setAuthToken from '../../src/utills/setAuthToken';\r\n// Load User\r\nexport const loadUser = ({token}) => async (dispatch) => {\r\n  localStorage.setItem('token', payload.token);\r\n  if (localStorage.token) {\r\n    setAuthToken(localStorage.token);\r\n  }\r\n  try {\r\n    const res = await axios.get('/api/auth');\r\n    dispatch({\r\n      type: USER_LOADED,\r\n      payload: res.data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: AUTH_ERROR,\r\n    });\r\n  }\r\n};\r\n// Load User1\r\nexport const loadUser1 = () => async (dispatch) => {\r\n  if (localStorage.token) {\r\n    setAuthToken(localStorage.token);\r\n  }\r\n  try {\r\n    const res = await axios.get('/api/auth');\r\n    dispatch({\r\n      type: USER_LOADED,\r\n      payload: res.data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: AUTH_ERROR,\r\n    });\r\n  }\r\n};\r\n\r\n// Register User\r\nexport const register =\r\n  ({ name, email, password }) =>\r\n  async (dispatch) => {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n    const body = JSON.stringify({ name, email, password });\r\n    try {\r\n      const res = await axios.post('/api/users', body, config);\r\n      dispatch({\r\n        type: REGISTER_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // dispatch(loadUser());\r\n    } catch (error) {\r\n      const errors = error.response.data.errors;\r\n      if (errors) {\r\n        errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n      }\r\n      dispatch({\r\n        type: REGISTER_FAIL,\r\n      });\r\n    }\r\n  };\r\n// Login User\r\nexport const login = (email, password) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  };\r\n  const body = JSON.stringify({ email, password });\r\n  try {\r\n    const res = await axios.post('/api/auth', body, config);\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n    dispatch(loadUser());\r\n  } catch (error) {\r\n    const errors = error.response.data.errors;\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n    }\r\n    dispatch({\r\n      type: LOGIN_FAIL,\r\n    });\r\n  }\r\n};\r\n// Reset Password\r\nexport const forgotPassword =\r\n  ({ email }) =>\r\n  async (dispatch) => {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n    const body = JSON.stringify({ email });\r\n    try {\r\n      const res = await axios.put('/api/forgot-password', body, config);\r\n      dispatch({\r\n        type: FORGOT_PASSWORD,\r\n        payload: res.data,\r\n      });\r\n      dispatch(loadUser());\r\n    } catch (error) {\r\n      const errors = error.response.data.errors;\r\n      if (errors) {\r\n        errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n      }\r\n      dispatch({\r\n        type: FORGOT_PASSWORD_FAIL,\r\n      });\r\n    }\r\n  };\r\n// // Activate Mail By Id\r\n// export const activateMail = (token) => async (dispatch) => {\r\n//   const config = {\r\n//     headers: {\r\n//       'Content-Type': 'application/json',\r\n//     },\r\n//   };\r\n//   const body = JSON.stringify({token});\r\n//   try {\r\n//     const res=await axios({\r\n//       method: 'POST',\r\n//       url:`/api/activation/${token}`,\r\n//       data:{token:res.token}\r\n//     }).then(res=>{\r\n//       console.log(res);\r\n//     });\r\n//     dispatch({\r\n//       type: REGISTER_SUCCESS,\r\n//       payload: res.data,\r\n//     });\r\n//     // dispatch(login());\r\n//     dispatch(loadUser());\r\n//   } catch (error) {\r\n//     dispatch({\r\n//       type: REGISTER_FAIL,\r\n//       payload: {\r\n//         message: error.response.statusText,\r\n//         status: error.response.status,\r\n//       },\r\n//     });\r\n//   }\r\n// };\r\n// Activate User\r\nexport const activateMail = ({token}) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  };\r\n  // const decoded = jwt.verify(token, config.get('jwtSecret'));\r\n  // req.user = decoded.user;\r\n  // let base64Url = token.split('.')[1]; // token you get\r\n  // let base64 = base64Url.replace('-', '+').replace('_', '/');\r\n  // let decodedData = JSON.parse(Buffer.from(base64, 'base64').toString('binary'));\r\n  // let {name,email, password}=decodedData\r\n  // console.log(name+email+password)\r\n  // window.localStorage.setItem('token', token);\r\n  const body = JSON.stringify({token});\r\n  try {\r\n    const res = await axios.post(`/api/email-activate`, body, config);\r\n    dispatch({\r\n      type: ACTIVATION_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n    dispatch(loadUser1(token));\r\n  } catch (error) {\r\n    const errors = error.response.data.errors;\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n    }\r\n    dispatch({\r\n      type: ACTIVATION_FAIL,\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}