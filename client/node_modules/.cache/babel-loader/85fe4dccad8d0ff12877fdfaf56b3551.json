{"ast":null,"code":"const express = require('express');\n\nconst router = express.Router();\n\nconst auth = require('../../middleware/auth');\n\nconst {\n  check,\n  validationResult\n} = require('express-validator');\n\nconst Profile = require('../../models/Profile');\n\nconst User = require('../../models/User');\n\nconst Post = require('../../models/Post'); // @route    POST api/posts\n// @desc     Create a post\n// @access   Private\n\n\nrouter.post('/', [auth, [check('text', 'text is required').not().isEmpty()]], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  try {\n    const user = await User.findById(req.user.id).select('-password');\n    const newPost = new Post({\n      text: req.body.text,\n      name: user.name,\n      avatar: user.avatar,\n      user: req.user.id\n    });\n    const post = await newPost.save();\n    res.json(post);\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route    GET api/posts\n// @desc     Get all posts\n// @access   Private\n\nrouter.get('/', auth, async (req, res) => {\n  try {\n    const posts = await Post.find().sort({\n      date: -1\n    });\n    res.json({\n      posts\n    });\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route    GET api/posts/:id\n// @desc     Get post by ID\n// @access   Private\n\nrouter.get('/:id', auth, async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n\n    if (!post) {\n      return res.status(404).json({\n        mesg: \"post doesn't exist or deleted'\"\n      });\n    }\n\n    res.json({\n      post\n    });\n  } catch (error) {\n    console.error(error.message);\n\n    if (error.kind === 'ObjectId') {\n      return res.status(404).json({\n        mesg: \"post doesn't exist or deleted'\"\n      });\n    }\n\n    res.status(500).send('Server Error');\n  }\n}); // @route    DELETE api/posts\n// @desc     DELETE post by ID\n// @access   Private\n\nrouter.delete('/:id', auth, async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n\n    if (!post) {\n      return res.status(404).json({\n        mesg: \"post doesn't exist or deleted'\"\n      });\n    } // Check post belongs to user\n\n\n    if (post.user.toString() !== req.user.id) {\n      return res.status(401).json({\n        mesg: 'Not Authorized'\n      });\n    }\n\n    await post.remove();\n    res.json({\n      msg: 'Post Deleted'\n    });\n  } catch (error) {\n    console.error(error.message);\n\n    if (error.kind === 'ObjectId') {\n      return res.status(404).json({\n        mesg: \"post doesn't exist or deleted'\"\n      });\n    }\n\n    res.status(500).send('Server Error');\n  }\n}); // @route    PUT api/posts/like/:id\n// @desc     Like a post\n// @access   Private\n\nrouter.put('/like/:id', auth, async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id); //    Check if the post has already been liked\n\n    if (post.likes.filter(like => like.user.toString() === req.user.id).length > 0) {\n      return res.status(400).json({\n        msg: 'post has been already liked'\n      });\n    }\n\n    post.likes.unshift({\n      user: req.user.id\n    });\n    await post.save();\n    res.json(post.likes);\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route    PUT api/posts/unlike/:id\n// @desc     UnLike a post\n// @access   Private\n\nrouter.put('/unlike/:id', auth, async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id); //    Check if the post has not already been liked\n\n    if (post.likes.filter(like => like.user.toString() === req.user.id).length === 0) {\n      return res.status(400).json({\n        msg: 'post has not yet  liked'\n      });\n    } //    Get remove index\n\n\n    const removeIndex = post.likes.map(like => like.user.toString()).indexOf(req.user.id);\n    post.likes.splice(removeIndex, 1);\n    await post.save();\n    res.json(post.likes);\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route    POST api/posts/comment/:id\n// @desc     Comment a post\n// @access   Private\n\nrouter.post('/comment/:id', [auth, [check('text', 'text is required').not().isEmpty()]], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  try {\n    const user = await User.findById(req.user.id).select('-password');\n    const post = await Post.findById(req.params.id);\n    const newComment = {\n      text: req.body.text,\n      name: user.name,\n      avatar: user.avatar,\n      user: req.user.id\n    };\n    post.comments.unshift(newComment);\n    await post.save();\n    res.json(post.comments);\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route    DELETE api/posts/comment/:id/:comment_id\n// @desc     Delete a comment\n// @access   Private\n\nrouter.delete('/comment/:id/:comment_id', auth, async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id); // Pull out the comment\n\n    const comment = post.comments.find(comment => comment.id === req.params.comment_id); // make sure the comment exists\n\n    if (!comment) {\n      return res.status(404).json({\n        msg: 'comment doesnt exist'\n      });\n    } // check for user\n\n\n    if (comment.user.toString() !== req.user.id) {\n      return res.status(401).json({\n        msg: 'User not authorized'\n      });\n    } //    Get remove index\n\n\n    const removeIndex = post.comments.map(comment => comment.user.toString()).indexOf(req.user.id);\n    post.comments.splice(removeIndex, 1);\n    await post.save();\n    res.json(post.comments);\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).send('Server Error');\n  }\n});\nmodule.exports = router;","map":{"version":3,"sources":["C:/Projects/Dev Connector/routes/api/posts.js"],"names":["express","require","router","Router","auth","check","validationResult","Profile","User","Post","post","not","isEmpty","req","res","errors","status","json","array","user","findById","id","select","newPost","text","body","name","avatar","save","error","console","message","send","get","posts","find","sort","date","params","mesg","kind","delete","toString","remove","msg","put","likes","filter","like","length","unshift","removeIndex","map","indexOf","splice","newComment","comments","comment","comment_id","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst auth = require('../../middleware/auth');\r\nconst { check, validationResult } = require('express-validator');\r\nconst Profile = require('../../models/Profile');\r\nconst User = require('../../models/User');\r\nconst Post = require('../../models/Post');\r\n\r\n// @route    POST api/posts\r\n// @desc     Create a post\r\n// @access   Private\r\n\r\nrouter.post(\r\n  '/',\r\n  [auth, [check('text', 'text is required').not().isEmpty()]],\r\n  async (req, res) => {\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      return res.status(400).json({ errors: errors.array() });\r\n    }\r\n    try {\r\n      const user = await User.findById(req.user.id).select('-password');\r\n      const newPost = new Post({\r\n        text: req.body.text,\r\n        name: user.name,\r\n        avatar: user.avatar,\r\n        user: req.user.id,\r\n      });\r\n      const post = await newPost.save();\r\n      res.json(post);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      res.status(500).send('Server Error');\r\n    }\r\n  }\r\n);\r\n\r\n// @route    GET api/posts\r\n// @desc     Get all posts\r\n// @access   Private\r\nrouter.get('/', auth, async (req, res) => {\r\n  try {\r\n    const posts = await Post.find().sort({ date: -1 });\r\n    res.json({ posts });\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    res.status(500).send('Server Error');\r\n  }\r\n});\r\n// @route    GET api/posts/:id\r\n// @desc     Get post by ID\r\n// @access   Private\r\nrouter.get('/:id', auth, async (req, res) => {\r\n  try {\r\n    const post = await Post.findById(req.params.id);\r\n    if (!post) {\r\n      return res.status(404).json({ mesg: \"post doesn't exist or deleted'\" });\r\n    }\r\n    res.json({ post });\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    if (error.kind === 'ObjectId') {\r\n      return res.status(404).json({ mesg: \"post doesn't exist or deleted'\" });\r\n    }\r\n    res.status(500).send('Server Error');\r\n  }\r\n});\r\n// @route    DELETE api/posts\r\n// @desc     DELETE post by ID\r\n// @access   Private\r\nrouter.delete('/:id', auth, async (req, res) => {\r\n  try {\r\n    const post = await Post.findById(req.params.id);\r\n    if (!post) {\r\n      return res.status(404).json({ mesg: \"post doesn't exist or deleted'\" });\r\n    }\r\n    // Check post belongs to user\r\n    if (post.user.toString() !== req.user.id) {\r\n      return res.status(401).json({ mesg: 'Not Authorized' });\r\n    }\r\n    await post.remove();\r\n    res.json({ msg: 'Post Deleted' });\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    if (error.kind === 'ObjectId') {\r\n      return res.status(404).json({ mesg: \"post doesn't exist or deleted'\" });\r\n    }\r\n    res.status(500).send('Server Error');\r\n  }\r\n});\r\n// @route    PUT api/posts/like/:id\r\n// @desc     Like a post\r\n// @access   Private\r\nrouter.put('/like/:id', auth, async (req, res) => {\r\n  try {\r\n    const post = await Post.findById(req.params.id);\r\n    //    Check if the post has already been liked\r\n    if (\r\n      post.likes.filter((like) => like.user.toString() === req.user.id).length >\r\n      0\r\n    ) {\r\n      return res.status(400).json({ msg: 'post has been already liked' });\r\n    }\r\n    post.likes.unshift({ user: req.user.id });\r\n    await post.save();\r\n    res.json(post.likes);\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    res.status(500).send('Server Error');\r\n  }\r\n});\r\n// @route    PUT api/posts/unlike/:id\r\n// @desc     UnLike a post\r\n// @access   Private\r\nrouter.put('/unlike/:id', auth, async (req, res) => {\r\n  try {\r\n    const post = await Post.findById(req.params.id);\r\n    //    Check if the post has not already been liked\r\n    if (\r\n      post.likes.filter((like) => like.user.toString() === req.user.id)\r\n        .length === 0\r\n    ) {\r\n      return res.status(400).json({ msg: 'post has not yet  liked' });\r\n    }\r\n    //    Get remove index\r\n    const removeIndex = post.likes\r\n      .map((like) => like.user.toString())\r\n      .indexOf(req.user.id);\r\n    post.likes.splice(removeIndex, 1);\r\n    await post.save();\r\n    res.json(post.likes);\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    res.status(500).send('Server Error');\r\n  }\r\n});\r\n// @route    POST api/posts/comment/:id\r\n// @desc     Comment a post\r\n// @access   Private\r\n\r\nrouter.post(\r\n  '/comment/:id',\r\n  [auth, [check('text', 'text is required').not().isEmpty()]],\r\n  async (req, res) => {\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      return res.status(400).json({ errors: errors.array() });\r\n    }\r\n    try {\r\n      const user = await User.findById(req.user.id).select('-password');\r\n      const post = await Post.findById(req.params.id);\r\n      const newComment = {\r\n        text: req.body.text,\r\n        name: user.name,\r\n        avatar: user.avatar,\r\n        user: req.user.id,\r\n      };\r\n      post.comments.unshift(newComment);\r\n      await post.save();\r\n      res.json(post.comments);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      res.status(500).send('Server Error');\r\n    }\r\n  }\r\n);\r\n\r\n// @route    DELETE api/posts/comment/:id/:comment_id\r\n// @desc     Delete a comment\r\n// @access   Private\r\nrouter.delete('/comment/:id/:comment_id', auth, async (req, res) => {\r\n  try {\r\n    const post = await Post.findById(req.params.id);\r\n    // Pull out the comment\r\n    const comment = post.comments.find(\r\n      (comment) => comment.id === req.params.comment_id\r\n    );\r\n    // make sure the comment exists\r\n    if (!comment) {\r\n      return res.status(404).json({ msg: 'comment doesnt exist' });\r\n    }\r\n    // check for user\r\n    if (comment.user.toString() !== req.user.id) {\r\n      return res.status(401).json({ msg: 'User not authorized' });\r\n    }\r\n    //    Get remove index\r\n    const removeIndex = post.comments\r\n      .map((comment) => comment.user.toString())\r\n      .indexOf(req.user.id);\r\n    post.comments.splice(removeIndex, 1);\r\n    await post.save();\r\n    res.json(post.comments);\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    res.status(500).send('Server Error');\r\n  }\r\n});\r\nmodule.exports = router;\r\n"]},"metadata":{},"sourceType":"script"}