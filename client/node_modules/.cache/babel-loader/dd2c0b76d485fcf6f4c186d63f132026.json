{"ast":null,"code":"const express = require('express');\n\nconst router = express.Router();\n\nconst auth = require('../../middleware/auth');\n\nconst User = require('../../models/User');\n\nconst {\n  check,\n  validationResult\n} = require('express-validator');\n\nconst bcrypt = require('bcryptjs');\n\nconst jwt = require('jsonwebtoken');\n\nconst config = require('config'); // @route    GET api/auth\n// @desc     Test router\n// @access   Public\n//   res.send('auth route');\n\n\nrouter.get('/', auth, async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id).select('-password');\n    res.json(user);\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).send('server error');\n  }\n}); // @route    POST api/auth\n// @desc     Authenticate user and Get token\n// @access   Public\n\nrouter.post('/', [check('email', 'Please include a valid email').isEmail(), check('password', 'Password is required').exists()], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  const {\n    email,\n    password\n  } = req.body;\n\n  try {\n    // See if user exist\n    let user = await User.findOne({\n      email\n    });\n\n    if (!user) {\n      return res.status(400).json({\n        errors: [{\n          message: 'Invalid Credentials'\n        }]\n      });\n    } //   compare password of user in DB\n\n\n    const isMatch = await bcrypt.compare(password, user.password);\n\n    if (!isMatch) {\n      return res.status(400).json({\n        errors: [{\n          message: 'Invalid Credentials'\n        }]\n      });\n    } // Return jsonwebtoken\n\n\n    const payload = {\n      user: {\n        id: user.id\n      }\n    };\n    jwt.sign(payload, config.get('jwtSecret'), {\n      expiresIn: 36000\n    }, (err, token) => {\n      if (err) throw err;\n      res.json({\n        token\n      });\n    }); // res.send(\"User Registerted\");\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).send('Server error');\n  }\n});\nmodule.exports = router;","map":{"version":3,"sources":["C:/Projects/Dev Connector/routes/api/auth.js"],"names":["express","require","router","Router","auth","User","check","validationResult","bcrypt","jwt","config","get","req","res","user","findById","id","select","json","error","console","message","status","send","post","isEmail","exists","errors","isEmpty","array","email","password","body","findOne","isMatch","compare","payload","sign","expiresIn","err","token","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst auth = require('../../middleware/auth');\r\nconst User = require('../../models/User');\r\nconst { check, validationResult } = require('express-validator');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst config = require('config');\r\n\r\n// @route    GET api/auth\r\n// @desc     Test router\r\n// @access   Public\r\n//   res.send('auth route');\r\nrouter.get('/', auth, async (req, res) => {\r\n  try {\r\n    const user = await User.findById(req.user.id).select('-password');\r\n    res.json(user);\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    res.status(500).send('server error');\r\n  }\r\n});\r\n\r\n// @route    POST api/auth\r\n// @desc     Authenticate user and Get token\r\n// @access   Public\r\n\r\nrouter.post(\r\n  '/',\r\n  [\r\n    check('email', 'Please include a valid email').isEmail(),\r\n    check('password', 'Password is required').exists(),\r\n  ],\r\n  async (req, res) => {\r\n    const errors = validationResult(req);\r\n\r\n    if (!errors.isEmpty()) {\r\n      return res.status(400).json({ errors: errors.array() });\r\n    }\r\n    const { email, password } = req.body;\r\n\r\n    try {\r\n      // See if user exist\r\n      let user = await User.findOne({ email });\r\n\r\n      if (!user) {\r\n        return res\r\n          .status(400)\r\n          .json({ errors: [{ message: 'Invalid Credentials' }] });\r\n      }\r\n\r\n      //   compare password of user in DB\r\n      const isMatch = await bcrypt.compare(password, user.password);\r\n\r\n      if (!isMatch) {\r\n        return res\r\n          .status(400)\r\n          .json({ errors: [{ message: 'Invalid Credentials' }] });\r\n      }\r\n\r\n      // Return jsonwebtoken\r\n\r\n      const payload = {\r\n        user: {\r\n          id: user.id,\r\n        },\r\n      };\r\n\r\n      jwt.sign(\r\n        payload,\r\n        config.get('jwtSecret'),\r\n        { expiresIn: 36000 },\r\n        (err, token) => {\r\n          if (err) throw err;\r\n          res.json({ token });\r\n        }\r\n      );\r\n      // res.send(\"User Registerted\");\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      res.status(500).send('Server error');\r\n    }\r\n  }\r\n);\r\n\r\nmodule.exports = router;\r\n"]},"metadata":{},"sourceType":"script"}