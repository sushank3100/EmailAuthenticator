{"ast":null,"code":"const express = require('express');\n\nconst router = express.Router();\n\nconst Profile = require('../../models/Profile');\n\nconst User = require('../../models/User');\n\nconst auth = require('../../middleware/auth');\n\nconst {\n  check,\n  validationResult\n} = require('express-validator');\n\nconst request = require('request');\n\nconst config = require('config'); // @route    GET api/profile/me\n// @desc     Get current users profile\n// @access   Private\n\n\nrouter.get('/me', auth, async (req, res) => {\n  try {\n    const profile = await Profile.findOne({\n      user: req.user.id\n    }).populate('user', ['name', 'avatar']);\n\n    if (!profile) {\n      return res.status(400).json({\n        message: 'there is no profile for this user'\n      });\n    }\n\n    res.json(profile);\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).send('server error');\n  }\n}); // @route    POST api/profile\n// @desc     Create and Update a users profile\n// @access   Private\n\nrouter.post('/', [auth, [check('status', 'Status is required').not().isEmpty(), check('skills', 'Skills are required').not().isEmpty()]], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  const {\n    company,\n    website,\n    location,\n    bio,\n    status,\n    githubusername,\n    skills,\n    youtube,\n    facebook,\n    twitter,\n    instagram,\n    linkedin\n  } = req.user; // Build profile Object\n  //  if (handle) profileFields.handle = handle;\n\n  const profileFields = {};\n  profileFields.user = req.user.id;\n  if (req.body.company) profileFields.company = req.body.company;\n  if (req.body.website) profileFields.website = req.body.website;\n  if (req.body.location) profileFields.location = req.body.location;\n  if (req.body.bio) profileFields.bio = req.body.bio;\n  if (req.body.status) profileFields.status = req.body.status;\n  if (req.body.githubusername) profileFields.githubusername = req.body.githubusername; // Skills - Spilt into array\n\n  if (typeof req.body.skills !== 'undefined') {\n    profileFields.skills = req.body.skills.split(',').map(skill => skill.trim());\n  }\n\n  console.log(profileFields.skills); //  Build Social Object\n\n  profileFields.social = {};\n  if (req.body.youtube) profileFields.social.youtube = req.body.youtube;\n  if (req.body.twitter) profileFields.social.twitter = req.body.twitter;\n  if (req.body.facebook) profileFields.social.facebook = req.body.facebook;\n  if (req.body.linkedin) profileFields.social.linkedin = req.body.linkedin;\n  if (req.body.instagram) profileFields.social.instagram = req.body.instagram;\n\n  try {\n    let profile = await Profile.findOne({\n      user: req.user.id\n    });\n\n    if (profile) {\n      // update profile\n      profile = await Profile.findOneAndUpdate({\n        user: req.user.id\n      }, {\n        $set: profileFields\n      }, {\n        new: true\n      });\n      return res.json(profile);\n    } // create profile\n\n\n    profile = new Profile(profileFields);\n    await profile.save();\n    return res.json(profile);\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route    GET api/profile\n// @desc     Get all profiles\n// @access   Public\n\nrouter.get('/', async (req, res) => {\n  try {\n    const profiles = await Profile.find().populate('user', ['name', 'avatar']);\n    res.json(profiles);\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).send('server error');\n  }\n}); // @route    GET api/profile/user/user_id\n// @desc     Get profile by user ID\n// @access   Public\n\nrouter.get('/user/:user_id', async (req, res) => {\n  try {\n    const profile = await Profile.findOne({\n      user: req.params.user_id\n    }).populate('user', ['name', 'avatar']);\n\n    if (!profile) {\n      return res.status(400).json({\n        message: 'Profile not found'\n      });\n    }\n\n    res.json(profile);\n  } catch (error) {\n    console.error(error.message);\n\n    if (error.kind == 'ObjectId') {\n      return res.status(400).json({\n        message: 'Profile not found'\n      });\n    }\n\n    res.status(500).send('server error');\n  }\n}); // @route    DELETE api/profile\n// @desc     DELETE profiles,User & posts\n// @access   Private\n\nrouter.delete('/', auth, async (req, res) => {\n  try {\n    // Remove profile\n    await Profile.findOneAndRemove({\n      user: req.user.id\n    }); // Remove user\n\n    await User.findOneAndRemove({\n      _id: req.user.id\n    });\n    res.json({\n      message: 'User Deleted'\n    });\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).send('server error');\n  }\n}); // @route    PUT api/profile/experience\n// @desc     Add Profile Experience\n// @access   Private\n\nrouter.put('/experience', [auth, [check('title', 'title is required').not().isEmpty(), check('company', 'company is required').not().isEmpty(), check('from', 'from date is required').not().isEmpty()]], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  const {\n    title,\n    company,\n    location,\n    from,\n    to,\n    current,\n    description\n  } = req.body;\n  const newExp = {\n    title,\n    company,\n    location,\n    from,\n    to,\n    current,\n    description\n  };\n\n  try {\n    const profile = await Profile.findOne({\n      user: req.user.id\n    });\n    profile.experience.unshift(newExp);\n    await profile.save();\n    res.json(profile);\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).send('server error');\n  }\n}); // @route    DELETE api/profile/experience/:exp_id\n// @desc     Delete Experience\n// @access   Private\n\nrouter.delete('/experience/:exp_id', auth, async (req, res) => {\n  try {\n    const profile = await Profile.findOne({\n      user: req.user.id\n    }); // Get remove Index\n\n    const removeIndex = profile.experience.map(item => item.id).indexOf(req.params.exp_id);\n    profile.experience.splice(removeIndex, 1);\n    await profile.save();\n    res.json(profile);\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).send('server error');\n  }\n}); // @route    PUT api/profile/education\n// @desc     Add Profile Education\n// @access   Private\n\nrouter.put('/education', [auth, [check('school', 'school is required').not().isEmpty(), check('degree', 'degree is required').not().isEmpty(), check('fieldofstudy', 'fieldofstudy date is required').not().isEmpty(), check('from', 'from date is required').not().isEmpty()]], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  const {\n    school,\n    degree,\n    fieldofstudy,\n    from,\n    to,\n    current,\n    description\n  } = req.body;\n  const newEdu = {\n    school,\n    degree,\n    fieldofstudy,\n    from,\n    to,\n    current,\n    description\n  };\n\n  try {\n    const profile = await Profile.findOne({\n      user: req.user.id\n    });\n    profile.education.unshift(newEdu);\n    await profile.save();\n    res.json(profile);\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).send('server error');\n  }\n}); // @route    DELETE api/profile/education/:edu_id\n// @desc     Delete Education\n// @access   Private\n\nrouter.delete('/education/:edu_id', auth, async (req, res) => {\n  try {\n    const profile = await Profile.findOne({\n      user: req.user.id\n    }); // Get remove Index\n\n    const removeIndex = profile.education.map(item => item.id).indexOf(req.params.edu_id);\n    profile.education.splice(removeIndex, 1);\n    await profile.save();\n    res.json(profile);\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).send('server error');\n  }\n}); // @route    GET api/profile/github/:username\n// @desc     Get users repos from github\n// @access   Public\n\nrouter.get('/github/:username', (req, res) => {\n  try {\n    const options = {\n      uri: `https://api.github.com/users/${req.params.username}/repos?per_page=5&sort=created:asc&client_id=${config.get('githubClientId')}&client_secret=${config.get('githubSecret')}`,\n      method: 'GET',\n      headers: {\n        'user-agent': 'node.js'\n      }\n    };\n    request(options, (error, response, body) => {\n      if (error) console.error(error);\n\n      if (response.statusCode !== 200) {\n        return res.status(400).json({\n          msg: 'No GitHub profile found'\n        });\n      }\n\n      res.json(JSON.parse(body));\n    });\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).send('server error');\n  }\n});\nmodule.exports = router;","map":{"version":3,"sources":["C:/Projects/Dev Connector/routes/api/profile.js"],"names":["express","require","router","Router","Profile","User","auth","check","validationResult","request","config","get","req","res","profile","findOne","user","id","populate","status","json","message","error","console","send","post","not","isEmpty","errors","array","company","website","location","bio","githubusername","skills","youtube","facebook","twitter","instagram","linkedin","profileFields","body","split","map","skill","trim","log","social","findOneAndUpdate","$set","new","save","profiles","find","params","user_id","kind","delete","findOneAndRemove","_id","put","title","from","to","current","description","newExp","experience","unshift","removeIndex","item","indexOf","exp_id","splice","school","degree","fieldofstudy","newEdu","education","edu_id","options","uri","username","method","headers","response","statusCode","msg","JSON","parse","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst Profile = require('../../models/Profile');\r\nconst User = require('../../models/User');\r\nconst auth = require('../../middleware/auth');\r\nconst { check, validationResult } = require('express-validator');\r\nconst request = require('request');\r\nconst config = require('config');\r\n\r\n// @route    GET api/profile/me\r\n// @desc     Get current users profile\r\n// @access   Private\r\n\r\nrouter.get('/me', auth, async (req, res) => {\r\n  try {\r\n    const profile = await Profile.findOne({\r\n      user: req.user.id,\r\n    }).populate('user', ['name', 'avatar']);\r\n    if (!profile) {\r\n      return res\r\n        .status(400)\r\n        .json({ message: 'there is no profile for this user' });\r\n    }\r\n    res.json(profile);\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    res.status(500).send('server error');\r\n  }\r\n});\r\n\r\n// @route    POST api/profile\r\n// @desc     Create and Update a users profile\r\n// @access   Private\r\n\r\nrouter.post(\r\n  '/',\r\n  [\r\n    auth,\r\n    [\r\n      check('status', 'Status is required').not().isEmpty(),\r\n      check('skills', 'Skills are required').not().isEmpty(),\r\n    ],\r\n  ],\r\n  async (req, res) => {\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      return res.status(400).json({ errors: errors.array() });\r\n    }\r\n    const {\r\n      company,\r\n      website,\r\n      location,\r\n      bio,\r\n      status,\r\n      githubusername,\r\n      skills,\r\n      youtube,\r\n      facebook,\r\n      twitter,\r\n      instagram,\r\n      linkedin,\r\n    } = req.user;\r\n\r\n    // Build profile Object\r\n    //  if (handle) profileFields.handle = handle;\r\n\r\n    const profileFields = {};\r\n    profileFields.user = req.user.id;\r\n    if (req.body.company) profileFields.company = req.body.company;\r\n    if (req.body.website) profileFields.website = req.body.website;\r\n    if (req.body.location) profileFields.location = req.body.location;\r\n    if (req.body.bio) profileFields.bio = req.body.bio;\r\n    if (req.body.status) profileFields.status = req.body.status;\r\n    if (req.body.githubusername)\r\n      profileFields.githubusername = req.body.githubusername;\r\n    // Skills - Spilt into array\r\n    if (typeof req.body.skills !== 'undefined') {\r\n      profileFields.skills = req.body.skills\r\n        .split(',')\r\n        .map((skill) => skill.trim());\r\n    }\r\n    console.log(profileFields.skills);\r\n    //  Build Social Object\r\n    profileFields.social = {};\r\n    if (req.body.youtube) profileFields.social.youtube = req.body.youtube;\r\n    if (req.body.twitter) profileFields.social.twitter = req.body.twitter;\r\n    if (req.body.facebook) profileFields.social.facebook = req.body.facebook;\r\n    if (req.body.linkedin) profileFields.social.linkedin = req.body.linkedin;\r\n    if (req.body.instagram) profileFields.social.instagram = req.body.instagram;\r\n\r\n    try {\r\n      let profile = await Profile.findOne({ user: req.user.id });\r\n      if (profile) {\r\n        // update profile\r\n        profile = await Profile.findOneAndUpdate(\r\n          { user: req.user.id },\r\n          { $set: profileFields },\r\n          { new: true }\r\n        );\r\n        return res.json(profile);\r\n      }\r\n      // create profile\r\n      profile = new Profile(profileFields);\r\n      await profile.save();\r\n      return res.json(profile);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      res.status(500).send('Server Error');\r\n    }\r\n  }\r\n);\r\n\r\n// @route    GET api/profile\r\n// @desc     Get all profiles\r\n// @access   Public\r\nrouter.get('/', async (req, res) => {\r\n  try {\r\n    const profiles = await Profile.find().populate('user', ['name', 'avatar']);\r\n    res.json(profiles);\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    res.status(500).send('server error');\r\n  }\r\n});\r\n\r\n// @route    GET api/profile/user/user_id\r\n// @desc     Get profile by user ID\r\n// @access   Public\r\nrouter.get('/user/:user_id', async (req, res) => {\r\n  try {\r\n    const profile = await Profile.findOne({\r\n      user: req.params.user_id,\r\n    }).populate('user', ['name', 'avatar']);\r\n    if (!profile) {\r\n      return res.status(400).json({ message: 'Profile not found' });\r\n    }\r\n    res.json(profile);\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    if (error.kind == 'ObjectId') {\r\n      return res.status(400).json({ message: 'Profile not found' });\r\n    }\r\n    res.status(500).send('server error');\r\n  }\r\n});\r\n\r\n// @route    DELETE api/profile\r\n// @desc     DELETE profiles,User & posts\r\n// @access   Private\r\nrouter.delete('/', auth, async (req, res) => {\r\n  try {\r\n    // Remove profile\r\n    await Profile.findOneAndRemove({ user: req.user.id });\r\n    // Remove user\r\n    await User.findOneAndRemove({ _id: req.user.id });\r\n    res.json({ message: 'User Deleted' });\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    res.status(500).send('server error');\r\n  }\r\n});\r\n\r\n// @route    PUT api/profile/experience\r\n// @desc     Add Profile Experience\r\n// @access   Private\r\nrouter.put(\r\n  '/experience',\r\n  [\r\n    auth,\r\n    [\r\n      check('title', 'title is required').not().isEmpty(),\r\n      check('company', 'company is required').not().isEmpty(),\r\n      check('from', 'from date is required').not().isEmpty(),\r\n    ],\r\n  ],\r\n  async (req, res) => {\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      return res.status(400).json({ errors: errors.array() });\r\n    }\r\n    const {\r\n      title,\r\n      company,\r\n      location,\r\n      from,\r\n      to,\r\n      current,\r\n      description,\r\n    } = req.body;\r\n\r\n    const newExp = {\r\n      title,\r\n      company,\r\n      location,\r\n      from,\r\n      to,\r\n      current,\r\n      description,\r\n    };\r\n\r\n    try {\r\n      const profile = await Profile.findOne({ user: req.user.id });\r\n      profile.experience.unshift(newExp);\r\n      await profile.save();\r\n      res.json(profile);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      res.status(500).send('server error');\r\n    }\r\n  }\r\n);\r\n// @route    DELETE api/profile/experience/:exp_id\r\n// @desc     Delete Experience\r\n// @access   Private\r\nrouter.delete('/experience/:exp_id', auth, async (req, res) => {\r\n  try {\r\n    const profile = await Profile.findOne({ user: req.user.id });\r\n    // Get remove Index\r\n    const removeIndex = profile.experience\r\n      .map((item) => item.id)\r\n      .indexOf(req.params.exp_id);\r\n    profile.experience.splice(removeIndex, 1);\r\n    await profile.save();\r\n    res.json(profile);\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    res.status(500).send('server error');\r\n  }\r\n});\r\n// @route    PUT api/profile/education\r\n// @desc     Add Profile Education\r\n// @access   Private\r\nrouter.put(\r\n  '/education',\r\n  [\r\n    auth,\r\n    [\r\n      check('school', 'school is required').not().isEmpty(),\r\n      check('degree', 'degree is required').not().isEmpty(),\r\n      check('fieldofstudy', 'fieldofstudy date is required').not().isEmpty(),\r\n      check('from', 'from date is required').not().isEmpty(),\r\n    ],\r\n  ],\r\n  async (req, res) => {\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      return res.status(400).json({ errors: errors.array() });\r\n    }\r\n    const {\r\n      school,\r\n      degree,\r\n      fieldofstudy,\r\n      from,\r\n      to,\r\n      current,\r\n      description,\r\n    } = req.body;\r\n\r\n    const newEdu = {\r\n      school,\r\n      degree,\r\n      fieldofstudy,\r\n      from,\r\n      to,\r\n      current,\r\n      description,\r\n    };\r\n\r\n    try {\r\n      const profile = await Profile.findOne({ user: req.user.id });\r\n      profile.education.unshift(newEdu);\r\n      await profile.save();\r\n      res.json(profile);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      res.status(500).send('server error');\r\n    }\r\n  }\r\n);\r\n// @route    DELETE api/profile/education/:edu_id\r\n// @desc     Delete Education\r\n// @access   Private\r\nrouter.delete('/education/:edu_id', auth, async (req, res) => {\r\n  try {\r\n    const profile = await Profile.findOne({ user: req.user.id });\r\n    // Get remove Index\r\n    const removeIndex = profile.education\r\n      .map((item) => item.id)\r\n      .indexOf(req.params.edu_id);\r\n    profile.education.splice(removeIndex, 1);\r\n    await profile.save();\r\n    res.json(profile);\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    res.status(500).send('server error');\r\n  }\r\n});\r\n// @route    GET api/profile/github/:username\r\n// @desc     Get users repos from github\r\n// @access   Public\r\nrouter.get('/github/:username', (req, res) => {\r\n  try {\r\n    const options = {\r\n      uri: `https://api.github.com/users/${\r\n        req.params.username\r\n      }/repos?per_page=5&sort=created:asc&client_id=${config.get(\r\n        'githubClientId'\r\n      )}&client_secret=${config.get('githubSecret')}`,\r\n      method: 'GET',\r\n      headers: { 'user-agent': 'node.js' },\r\n    };\r\n\r\n    request(options, (error, response, body) => {\r\n      if (error) console.error(error);\r\n      if (response.statusCode !== 200) {\r\n        return res.status(400).json({ msg: 'No GitHub profile found' });\r\n      }\r\n      res.json(JSON.parse(body));\r\n    });\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    res.status(500).send('server error');\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"]},"metadata":{},"sourceType":"script"}