{"ast":null,"code":"const jwt = require('jsonwebtoken');\n\nconst config = require('config');\n\nmodule.exports = function (req, res, next) {\n  // Get token from header\n  const token = req.header('x-auth-token'); // Check if not the tokken\n\n  if (!token) {\n    return res.status(401).json({\n      message: 'No Token , authorization denied'\n    });\n  } // Verify the token\n\n\n  try {\n    const decoded = jwt.verify(token, config.get('jwtSecret'));\n    req.user = decoded.user;\n    next();\n  } catch (error) {\n    res.status(401).json({\n      message: 'Token is not valid'\n    });\n  }\n};","map":{"version":3,"sources":["C:/Projects/Dev Connector/middleware/auth.js"],"names":["jwt","require","config","module","exports","req","res","next","token","header","status","json","message","decoded","verify","get","user","error"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AACzC;AAEA,QAAMC,KAAK,GAAGH,GAAG,CAACI,MAAJ,CAAW,cAAX,CAAd,CAHyC,CAKzC;;AACA,MAAI,CAACD,KAAL,EAAY;AACV,WAAOF,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB,CAAP;AACD,GARwC,CAUzC;;;AACA,MAAI;AACF,UAAMC,OAAO,GAAGb,GAAG,CAACc,MAAJ,CAAWN,KAAX,EAAkBN,MAAM,CAACa,GAAP,CAAW,WAAX,CAAlB,CAAhB;AACAV,IAAAA,GAAG,CAACW,IAAJ,GAAWH,OAAO,CAACG,IAAnB;AACAT,IAAAA,IAAI;AACL,GAJD,CAIE,OAAOU,KAAP,EAAc;AACdX,IAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACD;AACF,CAlBD","sourcesContent":["const jwt = require('jsonwebtoken');\r\nconst config = require('config');\r\n\r\nmodule.exports = function (req, res, next) {\r\n  // Get token from header\r\n\r\n  const token = req.header('x-auth-token');\r\n\r\n  // Check if not the tokken\r\n  if (!token) {\r\n    return res.status(401).json({ message: 'No Token , authorization denied' });\r\n  }\r\n\r\n  // Verify the token\r\n  try {\r\n    const decoded = jwt.verify(token, config.get('jwtSecret'));\r\n    req.user = decoded.user;\r\n    next();\r\n  } catch (error) {\r\n    res.status(401).json({ message: 'Token is not valid' });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}