{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\EmailAuthenticator\\\\client\\\\src\\\\components\\\\auth\\\\ResetPassword.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState } from 'react';\nimport { resetPassword } from '../../actions/auth';\nimport { connect } from 'react-redux';\nimport { setAlert } from '../../actions/alert';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ResetPassword = ({\n  setAlert,\n  resetPassword,\n  isAuthenticated\n}) => {\n  _s();\n\n  let urlElements = window.location.href.split('/');\n  let resetLink = '';\n  resetLink = urlElements[5]; //   const onSubmit = async (e) => {\n  //     e.preventDefault();\n  //     resetPassword(resetLink);\n  //   };\n\n  const [formData, setFormData] = useState({\n    password: '',\n    password2: ''\n  });\n  const {\n    password,\n    password2\n  } = formData;\n\n  const onChange = e => setFormData({ ...formData,\n    [e.target.name]: e.target.value\n  });\n\n  const onSubmit = async e => {\n    e.preventDefault();\n\n    if (password !== password2) {\n      setAlert('Password do not match', 'danger');\n    } else {\n      console.log(resetLink);\n      resetPassword({\n        password,\n        resetLink\n      });\n    }\n  }; // Redirect if Registered\n\n\n  if (isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-primary\",\n      children: \"You are almost done. To Reset Password to Your Account on Me2Me Please Enter New Password and Click on the Reset Password !\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: e => onSubmit(e),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"New Password\",\n          name: \"password\",\n          value: password,\n          onChange: e => onChange(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Confirm New Password\",\n          name: \"password2\",\n          value: password2,\n          onChange: e => onChange(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        value: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ResetPassword, \"sC1GebPGDi23KcG2HoS/GGKoaQM=\");\n\n_c = ResetPassword;\nResetPassword.propTypes = {\n  resetPassword: PropTypes.func.isRequired,\n  setAlert: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated\n});\n\nexport default connect(map, {\n  setAlert,\n  resetPassword\n})(ResetPassword);\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"sources":["C:/Projects/EmailAuthenticator/client/src/components/auth/ResetPassword.js"],"names":["React","Fragment","useState","resetPassword","connect","setAlert","PropTypes","ResetPassword","isAuthenticated","urlElements","window","location","href","split","resetLink","formData","setFormData","password","password2","onChange","e","target","name","value","onSubmit","preventDefault","console","log","propTypes","func","isRequired","mapStateToProps","state","auth","map"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport { resetPassword } from '../../actions/auth';\r\nimport { connect } from 'react-redux';\r\nimport { setAlert } from '../../actions/alert';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ResetPassword = ({ setAlert, resetPassword,isAuthenticated  }) => {\r\n  let urlElements = window.location.href.split('/');\r\n  let resetLink = '';\r\n  resetLink = urlElements[5];\r\n  //   const onSubmit = async (e) => {\r\n  //     e.preventDefault();\r\n  //     resetPassword(resetLink);\r\n  //   };\r\n  const [formData, setFormData] = useState({\r\n    password: '',\r\n    password2: '',\r\n  });\r\n  const { password, password2 } = formData;\r\n  const onChange = (e) =>\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (password !== password2) {\r\n      setAlert('Password do not match', 'danger');\r\n    } else {\r\n      console.log(resetLink);\r\n      resetPassword({ password, resetLink });\r\n    }\r\n  };\r\n  // Redirect if Registered\r\n  if (isAuthenticated) {\r\n    return <Redirect to='/dashboard' />;\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <h2 className='text-primary'>\r\n        You are almost done. To Reset Password to Your Account on Me2Me Please\r\n        Enter New Password and Click on the Reset Password !\r\n      </h2>\r\n      <form className='form' onSubmit={(e) => onSubmit(e)}>\r\n        <div className='form-group'>\r\n          <input\r\n            type='password'\r\n            placeholder='New Password'\r\n            name='password'\r\n            value={password}\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n        </div>\r\n        <div className='form-group'>\r\n          <input\r\n            type='password'\r\n            placeholder='Confirm New Password'\r\n            name='password2'\r\n            value={password2}\r\n            onChange={(e) => onChange(e)}\r\n          />\r\n        </div>\r\n        <input\r\n          type='submit'\r\n          className='btn btn-primary'\r\n          value='Reset Password'\r\n        />\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\nResetPassword.propTypes = {\r\n  resetPassword: PropTypes.func.isRequired,\r\n  setAlert: PropTypes.func.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n  });\r\nexport default connect(map, { setAlert, resetPassword })(ResetPassword);\r\n"]},"metadata":{},"sourceType":"module"}