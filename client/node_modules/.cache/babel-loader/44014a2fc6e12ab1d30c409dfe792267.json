{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Dev Connector\\\\client\\\\src\\\\components\\\\profile\\\\ProfileGithub.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport { getGithubRepos } from '../../actions/';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProfileGithub = ({\n  username,\n  getGithubRepos,\n  repos\n}) => {\n  _s();\n\n  useEffect(() => {\n    getGithubRepos(username);\n  }, [getGithubRepos]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile-github\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-primary my-1\",\n      children: \"Github Repos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this), repos === null ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 23\n    }, this) : repos.map(repo => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"repo bg-white p-1 my-1\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: repo.html_url,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: repo.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: repo.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"badge badge-primary\",\n            children: [\"Stars:\", repo.stargazers_count]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"badge badge-dark\",\n            children: [\"Watchers:\", repo.watchers_count]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"badge badge-light\",\n            children: [\"Forks:\", repo.forks_count]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 21\n      }, this)]\n    }, repo._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ProfileGithub, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = ProfileGithub;\nProfileGithub.propTypes = {\n  getGithubRepos: PropTypes.func.isRequired,\n  repos: PropTypes.array.isRequired,\n  username: PropTypes.string.isRequired\n};\n\nconst mapStateToProps = state => ({\n  repos: state.profile.repos\n});\n\nexport default connect(mapStateToProps)(ProfileGithub);\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileGithub\");","map":{"version":3,"sources":["C:/Projects/Dev Connector/client/src/components/profile/ProfileGithub.js"],"names":["React","useEffect","PropTypes","connect","Spinner","getGithubRepos","ProfileGithub","username","repos","map","repo","html_url","name","description","stargazers_count","watchers_count","forks_count","_id","propTypes","func","isRequired","array","string","mapStateToProps","state","profile"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAAQC,cAAR,QAA6B,gBAA7B;;;AACA,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAUF,EAAAA,cAAV;AAAyBG,EAAAA;AAAzB,CAAD,KAAqC;AAAA;;AACvDP,EAAAA,SAAS,CAAC,MAAI;AACVI,IAAAA,cAAc,CAACE,QAAD,CAAd;AACH,GAFQ,EAEP,CAACF,cAAD,CAFO,CAAT;AAGA,sBAAO;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACH;AAAI,MAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADG,EAIFG,KAAK,KAAG,IAAR,gBAAa,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAb,GACGA,KAAK,CAACC,GAAN,CAAUC,IAAI,iBACV;AAAoB,MAAA,SAAS,EAAC,wBAA9B;AAAA,8BACI;AAAA,gCACI;AAAA,iCACI;AAAG,YAAA,IAAI,EAAEA,IAAI,CAACC,QAAd;AAAwB,YAAA,MAAM,EAAC,QAA/B;AAAwC,YAAA,GAAG,EAAC,qBAA5C;AAAA,sBACKD,IAAI,CAACE;AADV;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAMQ;AAAA,oBACKF,IAAI,CAACG;AADV;AAAA;AAAA;AAAA;AAAA,gBANR;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAWI;AAAA,+BACI;AAAA,kCACI;AAAI,YAAA,SAAS,EAAC,qBAAd;AAAA,iCACWH,IAAI,CAACI,gBADhB;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAII;AAAI,YAAA,SAAS,EAAC,kBAAd;AAAA,oCACcJ,IAAI,CAACK,cADnB;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJJ,eAOI;AAAI,YAAA,SAAS,EAAC,mBAAd;AAAA,iCACWL,IAAI,CAACM,WADhB;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA,OAAUN,IAAI,CAACO,GAAf;AAAA;AAAA;AAAA;AAAA,YADJ,CALD;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAkCH,CAtCD;;GAAMX,a;;KAAAA,a;AAwCNA,aAAa,CAACY,SAAd,GAA0B;AAC1Bb,EAAAA,cAAc,EAACH,SAAS,CAACiB,IAAV,CAAeC,UADJ;AAE1BZ,EAAAA,KAAK,EAACN,SAAS,CAACmB,KAAV,CAAgBD,UAFI;AAG1Bb,EAAAA,QAAQ,EAACL,SAAS,CAACoB,MAAV,CAAiBF;AAHA,CAA1B;;AAKA,MAAMG,eAAe,GAACC,KAAK,KAAK;AAC5BhB,EAAAA,KAAK,EAACgB,KAAK,CAACC,OAAN,CAAcjB;AADQ,CAAL,CAA3B;;AAGA,eAAeL,OAAO,CAACoB,eAAD,CAAP,CAAyBjB,aAAzB,CAAf","sourcesContent":["import React , {useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\nimport Spinner from '../layout/Spinner';\r\nimport {getGithubRepos} from '../../actions/';\r\nconst ProfileGithub = ({username,getGithubRepos,repos}) => {\r\n    useEffect(()=>{\r\n        getGithubRepos(username)\r\n    },[getGithubRepos])\r\n    return <div className=\"profile-github\">\r\n        <h2 className=\"text-primary my-1\">\r\n            Github Repos\r\n        </h2>\r\n        {repos===null?<Spinner/>:(\r\n            repos.map(repo=>(\r\n                <div key={repo._id} className=\"repo bg-white p-1 my-1\">\r\n                    <div>\r\n                        <h4>\r\n                            <a href={repo.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                {repo.name}\r\n                            </a>\r\n                        </h4>\r\n                            <p>\r\n                                {repo.description}\r\n                            </p>\r\n                    </div>\r\n                    <div>\r\n                        <ul>\r\n                            <li className=\"badge badge-primary\">\r\n                                Stars:{repo.stargazers_count}\r\n                            </li>\r\n                            <li className=\"badge badge-dark\">\r\n                                Watchers:{repo.watchers_count}\r\n                            </li>\r\n                            <li className=\"badge badge-light\">\r\n                                Forks:{repo.forks_count}\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            ))\r\n        )}\r\n    </div>\r\n}\r\n\r\nProfileGithub.propTypes = {\r\ngetGithubRepos:PropTypes.func.isRequired,\r\nrepos:PropTypes.array.isRequired,\r\nusername:PropTypes.string.isRequired,\r\n}\r\nconst mapStateToProps=state => ({\r\n    repos:state.profile.repos\r\n})\r\nexport default connect(mapStateToProps)(ProfileGithub);\r\n"]},"metadata":{},"sourceType":"module"}