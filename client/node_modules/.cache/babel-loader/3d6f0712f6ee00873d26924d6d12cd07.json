{"ast":null,"code":"const express = require('express');\n\nconst router = express.Router();\n\nconst {\n  check,\n  validationResult\n} = require('express-validator');\n\nconst User = require('../../models/User');\n\nconst gravatar = require('gravatar');\n\nconst bcrypt = require('bcryptjs');\n\nconst jwt = require('jsonwebtoken');\n\nconst config = require('config'); // @route    POST api/users\n// @desc     Register User\n// @access   Public\n\n\nrouter.post('/', [check('name', 'Name is required').not().isEmpty(), check('email', 'Please include a valid email').isEmail(), check('password', 'Please enter a password with 6 or more characters').isLength({\n  min: 6\n})], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  const {\n    name,\n    email,\n    password\n  } = req.body;\n\n  try {\n    // See if user exist\n    let user = await User.findOne({\n      email\n    });\n\n    if (user) {\n      return res.status(400).json({\n        errors: [{\n          message: 'user already exists'\n        }]\n      });\n    } // Get users gravatar i.e profile of github\n\n\n    const avatar = gravatar.url(email, {\n      s: '200',\n      r: 'pg',\n      d: 'mm' //  d:'404'\n\n    });\n    user = new User({\n      name,\n      email,\n      avatar,\n      password\n    }); // Encrypt password\n\n    const salt = await bcrypt.genSalt(10); //default value 10 more the value more secure\n\n    user.password = await bcrypt.hash(password, salt);\n    await user.save(); // Return jsonwebtoken\n\n    const payload = {\n      user: {\n        id: user.id\n      }\n    };\n    jwt.sign(payload, config.get('jwtSecret'), {\n      expiresIn: 36000\n    }, (err, token) => {\n      if (err) throw err;\n      res.json({\n        token\n      });\n    }); // res.send(\"User Registerted\");\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).send('Server error');\n  }\n});\nmodule.exports = router;","map":{"version":3,"sources":["C:/Projects/Dev Connector/routes/api/users.js"],"names":["express","require","router","Router","check","validationResult","User","gravatar","bcrypt","jwt","config","post","not","isEmpty","isEmail","isLength","min","req","res","errors","status","json","array","name","email","password","body","user","findOne","message","avatar","url","s","r","d","salt","genSalt","hash","save","payload","id","sign","get","expiresIn","err","token","error","console","send","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst { check, validationResult } = require('express-validator');\r\nconst User = require('../../models/User');\r\nconst gravatar = require('gravatar');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst config = require('config');\r\n\r\n// @route    POST api/users\r\n// @desc     Register User\r\n// @access   Public\r\n\r\nrouter.post(\r\n  '/',\r\n  [\r\n    check('name', 'Name is required').not().isEmpty(),\r\n    check('email', 'Please include a valid email').isEmail(),\r\n    check(\r\n      'password',\r\n      'Please enter a password with 6 or more characters'\r\n    ).isLength({ min: 6 }),\r\n  ],\r\n  async (req, res) => {\r\n    const errors = validationResult(req);\r\n\r\n    if (!errors.isEmpty()) {\r\n      return res.status(400).json({ errors: errors.array() });\r\n    }\r\n    const { name, email, password } = req.body;\r\n\r\n    try {\r\n      // See if user exist\r\n      let user = await User.findOne({ email });\r\n      if (user) {\r\n        return res\r\n          .status(400)\r\n          .json({ errors: [{ message: 'user already exists' }] });\r\n      }\r\n      // Get users gravatar i.e profile of github\r\n\r\n      const avatar = gravatar.url(email, {\r\n        s: '200',\r\n        r: 'pg',\r\n        d: 'mm',\r\n        //  d:'404'\r\n      });\r\n\r\n      user = new User({\r\n        name,\r\n        email,\r\n        avatar,\r\n        password,\r\n      });\r\n      // Encrypt password\r\n\r\n      const salt = await bcrypt.genSalt(10); //default value 10 more the value more secure\r\n\r\n      user.password = await bcrypt.hash(password, salt);\r\n\r\n      await user.save();\r\n\r\n      // Return jsonwebtoken\r\n\r\n      const payload = {\r\n        user: {\r\n          id: user.id,\r\n        },\r\n      };\r\n\r\n      jwt.sign(\r\n        payload,\r\n        config.get('jwtSecret'),\r\n        { expiresIn: 36000 },\r\n        (err, token) => {\r\n          if (err) throw err;\r\n          res.json({ token });\r\n        }\r\n      );\r\n      // res.send(\"User Registerted\");\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      res.status(500).send('Server error');\r\n    }\r\n  }\r\n);\r\n\r\nmodule.exports = router;\r\n"]},"metadata":{},"sourceType":"script"}